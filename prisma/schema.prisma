// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

generator markdown {
  provider = "prisma-markdown"
  output   = "./SCHEMA.md"
  title    = "Atlas"
}

/// utf8mb4_general_ci 를 사용
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

/// #### 메모의 케이스
///
/// - 메모 작성하였지만 문제를 포기했을때
///
/// - 메모 작성하고 정답체크를 할때
///
/// - 정답체크를 실행하지 않은 상태에서 메모를 수정할때
///
/// - 정답체크를 실행하지 않은 상태에서 메모를 삭제할떄
///
/// **서버는 파일명을 생성하고 presigned url 로 직접 클라이언트가 올리도록 하는 방식**
///
/// #### 메모작성 시
///
/// - 메모는 클라이언트가 메모저장 할때 업로드 된다
///
/// - 문제에 대한 메모를 작성해야 할때 클라이언트는 서버에 요청한다
///
/// - 서버는 aws presigned url 을 생성하여 클라이언트에 내려주고
///
/// - 클라이언트는 메모파일을 업로드한다
/// 
/// 메모수정 시
/// 
/// - 사용자가 문제를 푸는 상태일때, 클라이언트는 메모를 
model ProblemMemo {
  /// Primary Key
  ///
  /// 메모를 저장하기 위해 uuid 를 미리 생성
  ///
  /// @format uuid v7
  memoUuid   Bytes     @id @default(dbgenerated("(uuid_to_bin(uuid()))")) @db.Binary(16)
  
  /// s3에 저장될 경로
  ///
  /// 도메인은 저장하지 않아야 함
  ///
  /// memo/uuid.png
  filePath   String?   @map("file_path") @db.Text

  /// soft delete 를 지원하기 위한 컬럼
  ///
  /// 주기적으로 테이블에서 removed_at 으로 검색하여 삭제
  removedAt  DateTime? @map("removed_at")

  @@map("problem_memos")
}

model Curriculum {
  id                Int               @id @default(autoincrement())

  /// 커리큘럼 이름
  name             String            @db.VarChar(128)

  /// 커리큘럼 e.g) 1SEMESTER, 2SEMESTER, 3SEMESTER
  curriculum       String            @db.VarChar(128)

  userCurriculums  UserCurriculum[]

  @@map("curriculums")
}


///
/// 다른 채널(성장판, 페이스북, 구글, 내부계정 등) 에서 가입된 유저를 모두 하나로 연결할 수 있도록 구성
///
/// 성장판의 경우 초등학교, 중학교, 고등학교 로 ID가 나뉨
///
/// 체험계정이 생성되고, 정회원 계정이 따로 생성됨
/// 
/// provider, channelUserId 가 복합키로 설정되어 있음
///
model UserChannel {
  /// 
  userId         BigInt    @map("user_id")

  /// 성장판, google, 다른 가입 채널들
  provider       String    @db.VarChar(128)

  /// 성장판에서 사용하고 있는 유저ID or google 에서 사용하고 있는 userId
  channelUserId  String    @map("channel_user_id") @db.VarChar(128)

  /// 생성일
  createdAt      DateTime? @map("created_at")
  user           User      @relation(fields: [userId], references: [id])

  @@id([provider, channelUserId])
  @@unique([userId])
  @@map("user_channels")
}

/// 유저가 가입한 커리큘럼 정보
model UserCurriculum {
  /// 유저의 ID
  userId       BigInt     @map("user_id")

  /// 커리큘럼의 ID
  curriculumId Int       @map("curriculum_id")

  /// 기본 커리큘럼 여부
  /// 
  /// 기본 커리큘럼은 유저가 가입한 커리큘럼 중 하나를 기본으로 선택하여 사용
  ///
  /// 자신의 본 커리큘럼이라고 보는게 맞을듯함
  ///
  /// 예를 들어 중2-1 에서 학습중이고, 중1-1 로 진도를 수정했을때 자신의 본 커리큘럼을 잊지 않도록 함
  isDefault    Boolean   @map("is_default")

  /// 활성화 여부
  /// 각 커리큘럼이 활성화 상태를 저장
  ///
  /// 만약 중1-1 커리큘럼을 수강하다가 초등학생 커리큘럼을 수강한다면 true
  ///
  /// 초등학생 커리큘럼을 두달후에 중단한다면 false 로 변경
  isActive     Boolean   @map("is_active")

  user         User      @relation(fields: [userId], references: [id])
  curriculum   Curriculum @relation(fields: [curriculumId], references: [id])

  /// 유저의 기본 설정화면
  /// 유저의 홈 화면을 [홈], [커리큘럼] (이름은 변경될 수 있음)
  home         String    @default("home")


  @@id([userId, curriculumId])
  @@map("user_curriculums")
}

/// 유저기반 학습내역을 저장
/// 
/// 스코어에서는 비디오를 본 학습내역은 해당 테이블에 기록되자 않고 다른 테이블에 기록됨
/// 
/// 그래서 서버에서 두가지 테이블을 조회하여 학습내역을 합쳐서 보여줌
///
/// 이 부분을 개선하기 위해 아틀라스에서는 한테이블에 학습내역으로 보이는것들을 모두 기록할 생각
///
/// 학습을 구분하면 몇가지로 나뉨
/// 
/// - 비디오만 볼 수 있는 학습
///
/// - 문제를 풀 수 있는 학습
///
/// 두가지를 분리하기 위해 카테고리 컬럼을 추가
model LessonSession {
  /// Primary Key
  id          BigInt        @id @default(autoincrement())

  /// 유저의 ID
  userId      BigInt        @map("user_id")

  /// 로시안에서 관리하고 있는 compositeId
  compositeId String        @map("composite_id") @db.VarChar(128)

  /// 레슨에서 받은 점수
  score       Int?

  /// 학습 카테고리
  /// 
  /// - 학습할 수 있는 타입: ProblemSets 존재
  ///
  /// - 비디오만 볼 수 있는 타입: ProblemSets 없음
  category    String        @db.VarChar(128)

  /// 문제 데이터 (JSON 형태로 저장)
  problems    String?       @db.Text

  /// 레슨 시작시간
  startedAt   DateTime      @map("staretd_at")

  /// 레슨 종료시간
  endedAt     DateTime?     @map("ended_at")

  /// 수정일
  modifiedAt  DateTime      @map("modified_at")

  /// 생성일
  createdAt   DateTime      @map("created_at")
  user        User          @relation(fields: [userId], references: [id])
  identifier  LessonIdentifier @relation(fields: [compositeId], references: [compositeId])

  /// 문제 세트 목록
  /// - 비디오 타입일 경우: 빈 배열 []
  ///
  /// - 학습 타입일 경우: 하나 이상의 문제 세트 존재
  /// 
  /// Prisma는 배열 관계를 nullable로 만들 수 없지만,
  ///
  /// 빈 배열을 통해 "문제 세트가 없는 상태"를 표현
  problemSets ProblemSet[]

  @@map("lesson_sessions")
}

/// 유저의 인증 정보를 저장하는 테이블
///
/// 내부 계정과 외부 인증(OAuth) 정보를 모두 관리
model UserAuth {
  /// Primary Key
  userId         BigInt    @id @map("user_id")

  /// 인증 제공자 (local, google, facebook 등)
  provider       String    @map("provider") @db.VarChar(128)

  /// 내부 계정용 비밀번호 (provider가 local일 경우)
  hashedPassword String?   @map("hashed_password") @db.VarChar(255)
  passwordSalt   String?   @map("password_salt") @db.VarChar(128)

  /// OAuth 관련 정보 (외부 인증의 경우)
  accessToken    String?   @map("access_token") @db.VarChar(1024)
  refreshToken   String?   @map("refresh_token") @db.VarChar(1024)
  expiresAt      DateTime? @map("expires_at")
  
  /// OAuth 제공자별 추가 정보 (JSON 형태로 저장)
  metadata       String?   @db.Text

  /// 생성일
  createdAt      DateTime  @default(now()) @map("created_at")

  /// 수정일
  updatedAt      DateTime  @updatedAt @map("updated_at")

  /// User 테이블과의 관계
  user           User      @relation(fields: [userId], references: [id])

  @@map("user_auths")
}

model User {
  /// Primary Key
  id              BigInt           @id @default(autoincrement())

  /// 유저의 권한
  /// 
  /// [개념학습, 연산학습, 둘다], [중학생 커리큘럼만], [초등학교 커리큘럼, 중학교 커리큘럼]
  ///
  role            String           @db.VarChar(255)

  /// 활성화 여부
  isActive        Boolean          @default(true)

  /// 마지막 로그인 시간
  lastLogin       DateTime         @map("last_login")

  /// 생성일
  createdAt       DateTime?        @map("created_at")

  userChannel     UserChannel?
  userCurriculums UserCurriculum[]
  lessonSessions  LessonSession[]
  auth           UserAuth?

  @@map("users")
}

/// lessonId, type, extra 세가지를 묶는 복합키로 스코어수학에서는 compositeId 개념이 있음
///
/// compositeId는 로시안에서 관리되고 있으나, 실제로는 불필요한 부분이 있음(eg. KNRLESS51223)
///
/// extra 가 가지고 있는 데이터의 타입은 text 이지만, null, numberic, [array] 등을 지원해야하기 때문에
///
/// 복합키의 개념을 테이블에서도 저장하여 사용
model LessonIdentifier {
  /// lessonId, type, extra 세가지를 묶는 복합키
  compositeId    String          @id @map("composite_id") @db.VarChar(128)
  /// 로시안에서 관리되고 있는 lessonId
  lessonId       Int             @map("lesson_id")

  /// 로시안에서 관리되고 있는 학습유형 (LESSON, SECLESSON, REVIEW, SECREVIEW, TUTORIAL...)
  type           String          @db.VarChar(128)

  /// null, 1, SEMESTER, [51123], [51123, 51124], [51129, 1] 등으로 각각의 타입마다 의미하는 바가 다름
  extra          String?         @db.VarChar(256)
  lessonSessions LessonSession[]

  @@map("lesson_identifiers")
}

/// 레슨에 진입 시 LessonSession 이 생성되고 문제셋이 출제 됨
///
/// 문제셋은 한번에 INSERT 되어 관리됨
/// 
/// row1 { sesionId: 1000, problemId: 100, unitId: 4, sequence: 0, context: lesson, isStep: false }
///
/// 100번 문제를 풀고 스텝문제가 출제가 되었다면
///  
/// row2 { sessionId: 1000, problemId: 444, unitId: 4, sequence: 0, context: lesson, isStep: true }
///
/// 
///
/// 
///
model ProblemSet {
  /// Primary Key
  id          BigInt    @id @default(autoincrement())

  /// 학습내역 하나에 대한 외래키
  sessionId   BigInt    @map("session_id")

  /// 부모 문제 ID (스텝문제인 경우 메인문제의 ID, 메인문제인 경우 null)
  parentId    BigInt?   @map("parent_id")

  /// 로시안 문제번호
  problemId   Int       @map("problem_id")

  /// 로시안 유닛번호
  unitId      Int       @map("unit_id")

  /// 문제의 순서, 1번째 문제
  sequence    Int

  /// 문제를 어디에서 풀었는지 확인하는 컬럼
  ///
  /// - 틀린문제 다시풀기
  ///
  /// - 오답노트 스코어에서는 `problem_logs, problem_logs_retry, tag_note_logs, tag_note_retry` 로 분리되어 있음
  /// 
  /// 이 부분들을 각각 조회해서 서버에서 조립해주어야 하는 부분이 있었음
  ///
  context     String    @db.VarChar(128)

  /// 스텝문제인지 확인하는 플래그
  isStep      Boolean   @map("is_step")

  /// 문제의 상태
  ///
  /// 틀렸다 맞았다 이것만 가지고 있는게 아닌, **세모** 상태가 존재
  ///
  /// 개선할 수 있다면 개선하고 싶은 상태
  ///
  /// - W: WRONG(문제를 틀림)
  ///
  /// - A: AWAY(문제를 포기)
  ///
  /// - R: RIGHT(문제를 맞춤)
  ///
  /// - S: STEP(스텝문제출제)
  /// 
  /// 문제를 풀때 스텝문제를 풀게 되면 상태를 메인문제에 대해서만 저장한다
  ///
  /// 메인문제는 자신의 상태 + 스텝에서 문제푼 상태 를 모두 저장한다
  ///
  /// 스텝문제에서는 자신의 상태만 기록한다(틀리고 맞음)
  ///
  /// 
  status      String?    @db.VarChar(128)

  /// 생성일
  createdAt   DateTime? @map("created_at")

  session     LessonSession @relation(fields: [sessionId], references: [id])

  @@map("problem_sets")
}

/// 미디어 컨텐츠 키 정보를 저장하는 테이블
model MediaContentKey {
  /// Primary Key
  id              Int       @id @default(autoincrement())

  /// 레슨ID
  title           String?   @db.VarChar(255)

  /// 파일명
  filename        String?   @db.VarChar(255)

  /// 카테고리
  category        String?   @db.VarChar(255)

  /// 채널 정보(모두 동일)
  channel         String?   @db.VarChar(255)

  /// 미디어 컨텐츠 키(secret)
  mediaContentKey String?   @map("media_content_key") @db.VarChar(255)

  /// 시간 정보
  ///
  /// hh:mm:ss:SSS
  time            String?   @db.VarChar(50)

  /// 재생 시간 (밀리초)
  durationMs      Int?      @map("duration_ms")

  /// 수정일
  modifiedAt      DateTime? @map("modified_at")

  /// 생성일
  createdAt       DateTime? @map("created_at")

  /// 삭제일
  removedAt       DateTime? @map("removed_at")

  @@index([mediaContentKey])
  @@index([title])
  @@map("media_content_keys")
}

/// 시스템 설정 변수를 저장하는 테이블
model ConfigVariable {
  /// Primary Key
  ///
  /// 변수명을 키로 사용
  variableName  String    @id @map("variable_name") @db.VarChar(40)

  /// 변수값
  value         String?   @db.MediumText

  /// 수정일
  modifiedAt    DateTime? @map("modified_at")

  /// 생성일
  createdAt     DateTime? @map("created_at")

  /// 삭제일
  removedAt     DateTime? @map("removed_at")

  @@map("config_variables")
}


/// 유저가 가지고 있는 지식을 표현하기 위한 테이블 elo 점수
///
/// 1:1 로 구현이 되어있어 User 를 조회하면 모든 지식을 조회할 수 있음
///
/// 이 테이블이 존재하지 않고 elo_change_logs 테이블에만 의존하면
///
/// 유저가 가지고 있는 지식을 조회하기 위해서는 group by 와 order by 를 사용해 조회해서 LIMIT 1 을 사용해야함
///
/// 어느게 더 좋을지는 모르겠음
model UserSynapse {
  /// Primary Key
  id              Int   @id @default(autoincrement())

  /// 유저의 ID
  userId         BigInt    @map("user_id")

  /// 지식의 ID
  knowledgeId    Int       @map("knowledge_id")

  /// elo 점수
  eloScore       Int       @map("elo_score")

  /// 생성일
  createdAt      DateTime  @map("created_at")

  /// 수정일
  updatedAt      DateTime  @map("updated_at")

  @@map("user_synapses")
  @@unique([userId, knowledgeId])
}

/// 지식 선수관계 테이블? (로시안에서 이 관계들을 정의하여 API로 내려주긴 할것임, 이를 테이블에 또 저장해야하는가?)

/// elo_change_logs 테이블
///
/// 이 테이블은 인서트만 하는게 어떨까....
/// 
/// LIMIT 1 로 최근걸 가져올수 있다
///
/// 유저의 elo 점수 변화 로그
/// 
/// 유저의 지식 선수관계 변화 로그
/// 
/// 

/// 지식을 유저별로 얼마나 완료되었는지 추적하는 친구
